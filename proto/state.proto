syntax = "proto3";
package cline;
option java_package = "bot.cline.proto";
option java_multiple_files = true;

import "common.proto";

service StateService {
  rpc getLatestState(EmptyRequest) returns (State);
  rpc subscribeToState(EmptyRequest) returns (stream State);
  rpc toggleFavoriteModel(StringRequest) returns (Empty);
  rpc resetState(EmptyRequest) returns (Empty);
  rpc togglePlanActMode(TogglePlanActModeRequest) returns (Empty);
  rpc updateTerminalConnectionTimeout(Int64Request) returns (Int64);
  rpc updateAutoApprovalSettings(AutoApprovalSettingsRequest) returns (Empty);
  rpc updateSettings(UpdateSettingsRequest) returns (Empty);
}

message State {
  string state_json = 1;
}

message TogglePlanActModeRequest {
  Metadata metadata = 1;
  ChatSettings chat_settings = 2;
  optional ChatContent chat_content = 3;
}

enum PlanActMode {
  PLAN = 0;
  ACT = 1;
}

message ChatSettings {
  PlanActMode mode = 1;
  optional string preferred_language = 2;
  optional string open_ai_reasoning_effort = 3;
}

message ChatContent {
  optional string message = 1;
  repeated string images = 2;
  repeated string files = 3;
}

// Message for auto approval settings
message AutoApprovalSettingsRequest {
  Metadata metadata = 1;

  message Actions {
    bool read_files = 1;
    bool read_files_externally = 2;
    bool edit_files = 3;
    bool edit_files_externally = 4;
    bool execute_safe_commands = 5;
    bool execute_all_commands = 6;
    bool use_browser = 7;
    bool use_mcp = 8;
  }

  int32 version = 2;
  bool enabled = 3;
  Actions actions = 4;
  int32 max_requests = 5;
  bool enable_notifications = 6;
  repeated string favorites = 7;
}

// Message for updating multiple settings at once
message UpdateSettingsRequest {
  Metadata metadata = 1;
  optional ApiConfiguration api_configuration = 2;
  optional string custom_instructions_setting = 3;
  optional TelemetrySetting telemetry_setting = 4;
  optional bool plan_act_separate_models_setting = 5;
  optional bool enable_checkpoints_setting = 6;
  optional bool mcp_marketplace_enabled = 7;
  optional ChatSettings chat_settings = 8;
  repeated string favoritedModelIds = 9;
  optional int32 request_timeout_ms = 10;
}

// API Configuration message with nested provider-specific configurations

message ApiConfiguration {
  string api_provider = 1;   // Sets the provider of the API, e.g., "openai", "anthropic", "ollama", etc.
  optional string api_model_id = 2;   // Sets the model ID for providers that do not have a provider-specific model ID field

  // Provider-specific configurations
  optional AnthropicConfig anthropic = 3;
  optional OpenRouterConfig openrouter = 4;
  optional OpenAIConfig openai = 5;
  optional OpenAINativeConfig openai_native = 6;
  optional AwsConfig aws = 7;
  optional VertexConfig vertex = 8;
  optional OllamaConfig ollama = 9;
  optional LMStudioConfig lm_studio = 10;
  optional GeminiConfig gemini = 11;
  optional LiteLLMConfig litellm = 12;
  optional FireworksConfig fireworks = 13;
  optional RequestyConfig requesty = 14;
  optional TogetherConfig together = 15;
  optional DeepSeekConfig deepseek = 16;
  optional QwenConfig qwen = 17;
  optional DoubaoConfig doubao = 18;
  optional MistralConfig mistral = 19;
  optional AzureConfig azure = 20;
  optional VSCodeLMConfig vscode = 21;
  optional NebiusConfig nebius = 22;
  optional AskSageConfig asksage = 23;
  optional XAIConfig xai = 24;
  optional SambanovaConfig sambanova = 25;
  optional CerebrasConfig cerebras = 26;
  optional ClineConfig cline = 27;
  
  // General settings
  optional string reasoning_effort = 28;
  optional int32 thinking_budget_tokens = 29;
  optional int32 request_timeout_ms = 30;
  repeated string favoritedModelIds = 31;
}

// Provider-specific configuration messages

message AnthropicConfig {
  optional string api_key = 1;
  optional string base_url = 2;
}

message OpenRouterConfig {
  optional string api_key = 1;
  optional string model_id = 2;
  optional string model_info = 3;
  optional string provider_sorting = 4;
}

message OpenAIConfig {
  optional string api_key = 1;
  optional string model_id = 2;
  optional string model_info = 3;
  optional string base_url = 4;
  optional string headers = 5;
}

message OpenAINativeConfig {
  optional string api_key = 1;
}

message AwsConfig {
  optional string access_key = 1;
  optional string secret_key = 2;
  optional string session_token = 3;
  optional string region = 4;
  optional bool use_cross_region_inference = 5;
  optional bool bedrock_use_prompt_cache = 6;
  optional string bedrock_endpoint = 7;
  optional string profile = 8;
  optional bool use_profile = 9;
  optional bool bedrock_custom_selected = 10;
  optional string bedrock_custom_model_base_id = 11;
}

message VertexConfig {
  optional string project_id = 1;
  optional string region = 2;
}

message OllamaConfig {
  optional string model_id = 1;
  optional string base_url = 2;
  optional string api_options_ctx_num = 3;
}

message LMStudioConfig {
  optional string model_id = 1;
  optional string base_url = 2;
}

message GeminiConfig {
  optional string api_key = 1;
  optional string base_url = 2;
}

message LiteLLMConfig {
  optional string api_key = 1;
  optional string model_id = 2;
  optional string base_url = 3;
  optional string model_info = 4;
  optional bool use_prompt_cache = 5;
}

message FireworksConfig {
  optional string api_key = 1;
  optional string model_id = 2;
  optional int32 model_max_completion_tokens = 3;
  optional int32 model_max_tokens = 4;
}

message RequestyConfig {
  optional string api_key = 1;
  optional string model_id = 2;
  optional string model_info = 3;
  optional string base_url = 4;
}

message TogetherConfig {
  optional string api_key = 1;
  optional string model_id = 2;
}

message DeepSeekConfig {
  optional string api_key = 1;
}

message QwenConfig {
  optional string api_key = 1;
  optional string api_line = 2;
}

message DoubaoConfig {
  optional string api_key = 1;
}

message MistralConfig {
  optional string api_key = 1;
}

message AzureConfig {
  optional string api_version = 1;
}

message VSCodeLMConfig {
  optional string model_selector = 1;
}

message NebiusConfig {
  optional string api_key = 1;
}

message AskSageConfig {
  optional string api_key = 1;
  optional string api_url = 2;
}

message XAIConfig {
  optional string api_key = 1;
}

message SambanovaConfig {
  optional string api_key = 1;
}

message CerebrasConfig {
  optional string api_key = 1;
}

message ClineConfig {
  optional string api_key = 1;
}

// Telemetry settings enum
enum TelemetrySetting {
  ENABLED = 0;
  DISABLED = 1;
}
