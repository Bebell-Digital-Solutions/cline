syntax = "proto3";
package cline;
option java_package = "bot.cline.proto";
option java_multiple_files = true;

import "common.proto";

service StateService {
  rpc getLatestState(EmptyRequest) returns (State);
  rpc subscribeToState(EmptyRequest) returns (stream State);
  rpc toggleFavoriteModel(StringRequest) returns (Empty);
  rpc resetState(EmptyRequest) returns (Empty);
  rpc togglePlanActMode(TogglePlanActModeRequest) returns (Empty);
  rpc updateTerminalConnectionTimeout(Int64Request) returns (Int64);
  rpc updateAutoApprovalSettings(AutoApprovalSettingsRequest) returns (Empty);
  rpc updateSettings(UpdateSettingsRequest) returns (Empty);
}

message State {
  string state_json = 1;
}

message TogglePlanActModeRequest {
  Metadata metadata = 1;
  ChatSettings chat_settings = 2;
  optional ChatContent chat_content = 3;
}

enum PlanActMode {
  PLAN = 0;
  ACT = 1;
}

message ChatSettings {
  PlanActMode mode = 1;
  optional string preferred_language = 2;
  optional string open_ai_reasoning_effort = 3;
}

message ChatContent {
  optional string message = 1;
  repeated string images = 2;
  repeated string files = 3;
}

// Message for auto approval settings
message AutoApprovalSettingsRequest {
  Metadata metadata = 1;

  message Actions {
    bool read_files = 1;
    bool read_files_externally = 2;
    bool edit_files = 3;
    bool edit_files_externally = 4;
    bool execute_safe_commands = 5;
    bool execute_all_commands = 6;
    bool use_browser = 7;
    bool use_mcp = 8;
  }

  int32 version = 2;
  bool enabled = 3;
  Actions actions = 4;
  int32 max_requests = 5;
  bool enable_notifications = 6;
  repeated string favorites = 7;
}

// Message for updating multiple settings at once
message UpdateSettingsRequest {
  Metadata metadata = 1;
  optional ApiConfiguration api_configuration = 2;
  optional string custom_instructions_setting = 3;
  optional TelemetrySetting telemetry_setting = 4;
  optional bool plan_act_separate_models_setting = 5;
  optional bool enable_checkpoints_setting = 6;
  optional bool mcp_marketplace_enabled = 7;
  optional ChatSettings chat_settings = 8;
  repeated string favorited_model_ids = 9;
  optional int32 request_timeout_ms = 10;
}

// API Configuration message
message ApiConfiguration {
  string api_provider = 1;
  optional string api_model_id = 2;
  optional string anthropic_api_key = 3;
  optional string openai_api_key = 4;
  optional string openrouter_api_key = 5;
  optional string openrouter_model_id = 6;
  optional string openai_model_id = 7;
  optional string ollama_model_id = 8;
  optional string ollama_base_url = 9;
  optional string lm_studio_model_id = 10;
  optional string lm_studio_base_url = 11;
  optional string cline_api_key = 12;
  optional string reasoning_effort = 13;
  optional int32 thinking_budget_tokens = 14;
  optional bool aws_bedrock_custom_selected = 15;
  optional string aws_bedrock_custom_model_base_id = 16;
  optional string litellm_model_id = 17;
  optional string litellm_base_url = 18;
  optional string litellm_api_key = 19;
  optional string requesty_model_id = 20;
  optional string requesty_base_url = 21;
  optional string requesty_api_key = 22;
  // Additional fields from state-keys.ts
  optional string azure_api_version = 23;
  optional string anthropic_base_url = 24;
  optional string openai_headers = 25; // Might need a dedicated message type for complex objects
  optional string openai_model_info = 26; // Might need a dedicated message type for complex objects
  optional string openrouter_model_info = 27; // Might need a dedicated message type for complex objects
  optional string openrouter_provider_sorting = 28;
  optional string vscode_lm_model_selector = 29; // Might need a dedicated message type for complex objects
  optional string ollama_api_options_ctx_num = 30;
  optional string fireworks_model_id = 31;
  optional int32 fireworks_model_max_completion_tokens = 32;
  optional int32 fireworks_model_max_tokens = 33;
  optional string together_model_id = 34;
  optional string together_api_key = 35;
  optional string qwen_api_line = 36;
  optional string qwen_api_key = 37;
  optional string doubao_api_key = 38;
  optional string mistral_api_key = 39;
  optional string aws_region = 40;
  optional bool aws_use_cross_region_inference = 41;
  optional bool aws_bedrock_use_prompt_cache = 42;
  optional string aws_bedrock_endpoint = 43;
  optional string aws_profile = 44;
  optional bool aws_use_profile = 45;
  optional string aws_access_key = 46;
  optional string aws_secret_key = 47;
  optional string aws_session_token = 48;
  optional string vertex_project_id = 49;
  optional string vertex_region = 50;
  optional string gemini_api_key = 51;
  optional string gemini_base_url = 52;
  optional string openai_native_api_key = 53;
  optional string deepseek_api_key = 54;
  optional string asksage_api_url = 55;
  optional string asksage_api_key = 56;
  optional string xai_api_key = 57;
  optional string nebius_api_key = 58;
  optional string sambanova_api_key = 59;
  optional string cerebras_api_key = 60;
  optional bool litellm_use_prompt_cache = 61;
  optional string litellm_model_info = 62; // Might need a dedicated message type for complex objects
  optional string requesty_model_info = 63; // Might need a dedicated message type for complex objects
  optional string open_ai_base_url = 64; // Base URL for OpenAI API
}

// Telemetry settings enum
enum TelemetrySetting {
  ENABLED = 0;
  DISABLED = 1;
}
