syntax = "proto3";

package cline;

option go_package = "github.com/cline/intelligence-engine/pkg/proto";

// MCP service for Model Context Protocol integration
service MCPService {
  // List available MCP servers
  rpc ListMCPServers(ListMCPServersRequest) returns (ListMCPServersResponse);
  
  // Call a tool provided by an MCP server
  rpc CallMCPTool(CallMCPToolRequest) returns (CallMCPToolResponse);
  
  // Access a resource provided by an MCP server
  rpc AccessMCPResource(AccessMCPResourceRequest) returns (AccessMCPResourceResponse);
  
  // Register a new MCP server
  rpc RegisterMCPServer(RegisterMCPServerRequest) returns (RegisterMCPServerResponse);
  
  // Start an MCP server
  rpc StartMCPServer(StartMCPServerRequest) returns (StartMCPServerResponse);
  
  // Stop an MCP server
  rpc StopMCPServer(StopMCPServerRequest) returns (StopMCPServerResponse);
}

// Request to list MCP servers
message ListMCPServersRequest {}

// Response with list of MCP servers
message ListMCPServersResponse {
  repeated MCPServer servers = 1; // Available MCP servers
  string error = 2;              // Error message if any
}

// MCP server information
message MCPServer {
  string name = 1;               // Name of the server
  string version = 2;            // Version of the server
  bool is_running = 3;           // Whether the server is running
  repeated MCPTool tools = 4;    // Tools provided by the server
  repeated MCPResource resources = 5; // Resources provided by the server
}

// MCP tool information
message MCPTool {
  string name = 1;               // Name of the tool
  string description = 2;        // Description of the tool
  string input_schema = 3;       // JSON Schema of the input
  string output_schema = 4;      // JSON Schema of the output
}

// MCP resource information
message MCPResource {
  string uri = 1;                // URI of the resource
  string name = 2;               // Name of the resource
  string mime_type = 3;          // MIME type of the resource
  string description = 4;        // Description of the resource
}

// Request to call an MCP tool
message CallMCPToolRequest {
  string server_name = 1;        // Name of the server
  string tool_name = 2;          // Name of the tool
  string arguments = 3;          // JSON-encoded arguments
}

// Response from calling an MCP tool
message CallMCPToolResponse {
  bool success = 1;              // Whether the call was successful
  string content = 2;            // Response content
  string error = 3;              // Error message if any
  bool is_error = 4;             // Whether the response indicates an error
}

// Request to access an MCP resource
message AccessMCPResourceRequest {
  string server_name = 1;        // Name of the server
  string uri = 2;                // URI of the resource
}

// Response from accessing an MCP resource
message AccessMCPResourceResponse {
  bool success = 1;              // Whether the access was successful
  string content = 2;            // Resource content
  string mime_type = 3;          // MIME type of the resource
  string error = 4;              // Error message if any
}

// Request to register a new MCP server
message RegisterMCPServerRequest {
  string name = 1;               // Name for the server
  string command = 2;            // Command to start the server
  repeated string args = 3;      // Arguments for the command
  map<string, string> env = 4;   // Environment variables
  bool auto_start = 5;           // Whether to start the server automatically
}

// Response from registering an MCP server
message RegisterMCPServerResponse {
  bool success = 1;              // Whether the registration was successful
  string error = 2;              // Error message if any
}

// Request to start an MCP server
message StartMCPServerRequest {
  string name = 1;               // Name of the server
}

// Response from starting an MCP server
message StartMCPServerResponse {
  bool success = 1;              // Whether the server was started successfully
  string error = 2;              // Error message if any
}

// Request to stop an MCP server
message StopMCPServerRequest {
  string name = 1;               // Name of the server
}

// Response from stopping an MCP server
message StopMCPServerResponse {
  bool success = 1;              // Whether the server was stopped successfully
  string error = 2;              // Error message if any
}
