syntax = "proto3";

package cline;

option go_package = "github.com/cline/intelligence-engine/pkg/proto";

// Search service for finding patterns in files
service SearchService {
  // Search for a pattern in files
  rpc SearchFiles(SearchFilesRequest) returns (SearchFilesResponse);
  
  // Get code definition names from files
  rpc ListCodeDefinitionNames(CodeDefinitionRequest) returns (CodeDefinitionResponse);
  
  // Replace text in files
  rpc ReplaceInFile(ReplaceInFileRequest) returns (ReplaceInFileResponse);
}

// Request to search files
message SearchFilesRequest {
  string path = 1;              // Directory path to search in
  string regex = 2;             // Regular expression to search for
  string file_pattern = 3;      // File pattern (e.g., "*.ts", "*.go")
  bool recursive = 4;           // Whether to search recursively
  int32 context_lines = 5;      // Number of context lines to include (default: 2)
}

// Response from searching files
message SearchFilesResponse {
  repeated SearchResult results = 1; // Search results
  string error = 2;                 // Error message if any
}

// Individual search result
message SearchResult {
  string file_path = 1;         // Path to the file where the match was found
  int32 line_number = 2;        // Line number of the match
  string match_text = 3;        // The matched text
  string context = 4;           // The context surrounding the match
  int32 start_line = 5;         // Start line of the context
  int32 end_line = 6;           // End line of the context
}

// Request to list code definition names
message CodeDefinitionRequest {
  string path = 1;              // Directory path to search in
  string file_pattern = 2;      // File pattern (e.g., "*.ts", "*.go")
}

// Response with code definition names
message CodeDefinitionResponse {
  repeated CodeDefinition definitions = 1; // Code definitions
  string error = 2;                       // Error message if any
}

// Individual code definition
message CodeDefinition {
  string file_path = 1;         // Path to the file containing the definition
  string name = 2;              // Name of the definition
  string type = 3;              // Type of definition (function, class, etc.)
  int32 line_number = 4;        // Line number of the definition
  string signature = 5;         // Signature of the definition
}

// Request to replace text in a file
message ReplaceInFileRequest {
  string path = 1;              // File path
  repeated Replacement replacements = 2; // Replacements to make
}

// Individual replacement
message Replacement {
  string search = 1;            // Text to search for
  string replace = 2;           // Text to replace with
}

// Response from replacing text in a file
message ReplaceInFileResponse {
  bool success = 1;             // Whether the replacement was successful
  string error = 2;             // Error message if any
  int32 replacements_made = 3;  // Number of replacements made
}
