#!/bin/bash

set -e

# Get the directory of this script
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Get the root directory of the project
ROOT_DIR="$( cd "$SCRIPT_DIR/.." && pwd )"

# Define output directories
TS_OUT_DIR="$ROOT_DIR/src/shared/proto"

# Create the output directories if they don't exist
mkdir -p "$TS_OUT_DIR"

# Clean up any existing generated files
echo "Cleaning up existing generated TypeScript files..."
find "$TS_OUT_DIR" -name "*.ts" -type f -delete

# Process all proto files from the proto directory
echo "Processing proto files from $SCRIPT_DIR..."
find "$SCRIPT_DIR" -name "*.proto" -type f | while read -r proto_file; do
  echo "Generating TypeScript code for $(basename "$proto_file")..."
  protoc \
    --plugin=protoc-gen-ts_proto="$ROOT_DIR/node_modules/.bin/protoc-gen-ts_proto" \
    --ts_proto_out="$TS_OUT_DIR" \
    --ts_proto_opt=outputServices=generic-definitions,env=node,esModuleInterop=true,useDate=false,useOptionals=messages \
    --proto_path="$SCRIPT_DIR" \
    "$proto_file"
done

echo "Protocol Buffer code generation completed successfully."
echo "TypeScript files generated in: $TS_OUT_DIR"

# Function to generate method registration file for a service directory
generate_method_registrations() {
  local service_dir="$1"
  local registry_file="methods.ts"
  local service_name=$(basename "$service_dir")
  
  echo "Generating method registrations for $service_dir..."
  
  # Create the output file with header
  cat > "$service_dir/$registry_file" << EOL
// AUTO-GENERATED FILE - DO NOT MODIFY DIRECTLY
// Generated by proto/build-proto.sh

// Import all method implementations
import { registerMethod } from "./index";
EOL
  
  # Find all implementation files and add imports
  for file in "$service_dir"/*.ts; do
    base_name=$(basename "$file" .ts)
    
    # Skip index.ts and methods.ts
    if [[ "$base_name" != "index" && "$base_name" != "methods" ]]; then
      echo "import { $base_name } from \"./$base_name\";" >> "$service_dir/$registry_file"
    fi
  done
  
  # Add registration function
  cat >> "$service_dir/$registry_file" << EOL

// Register all ${service_name} service methods
export function registerAllMethods(): void {
  // Register each method with the registry
EOL
  
  # Add registration statements
  for file in "$service_dir"/*.ts; do
    base_name=$(basename "$file" .ts)
    
    # Skip index.ts and methods.ts
    if [[ "$base_name" != "index" && "$base_name" != "methods" ]]; then
      echo "  registerMethod(\"$base_name\", $base_name);" >> "$service_dir/$registry_file"
    fi
  done
  
  # Close the function
  echo "}" >> "$service_dir/$registry_file"
  
  echo "Generated $service_dir/$registry_file"
}

# Generate method registration files for service directories
if [ -d "$ROOT_DIR/src/core/controller/browser" ]; then
  generate_method_registrations "$ROOT_DIR/src/core/controller/browser"
fi

# Add more service directories here as needed
# if [ -d "$ROOT_DIR/src/core/controller/someOtherService" ]; then
#   generate_method_registrations "$ROOT_DIR/src/core/controller/someOtherService"
# fi

echo "Method registration files generated successfully."

# Make the script executable
chmod +x "$SCRIPT_DIR/build-proto.sh"
