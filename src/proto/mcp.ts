// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.30.0
// source: mcp.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "cline";

/** Request to list MCP servers */
export interface ListMCPServersRequest {
}

/** Response with list of MCP servers */
export interface ListMCPServersResponse {
  /** Available MCP servers */
  servers: MCPServer[];
  /** Error message if any */
  error: string;
}

/** MCP server information */
export interface MCPServer {
  /** Name of the server */
  name: string;
  /** Version of the server */
  version: string;
  /** Whether the server is running */
  isRunning: boolean;
  /** Tools provided by the server */
  tools: MCPTool[];
  /** Resources provided by the server */
  resources: MCPResource[];
}

/** MCP tool information */
export interface MCPTool {
  /** Name of the tool */
  name: string;
  /** Description of the tool */
  description: string;
  /** JSON Schema of the input */
  inputSchema: string;
  /** JSON Schema of the output */
  outputSchema: string;
}

/** MCP resource information */
export interface MCPResource {
  /** URI of the resource */
  uri: string;
  /** Name of the resource */
  name: string;
  /** MIME type of the resource */
  mimeType: string;
  /** Description of the resource */
  description: string;
}

/** Request to call an MCP tool */
export interface CallMCPToolRequest {
  /** Name of the server */
  serverName: string;
  /** Name of the tool */
  toolName: string;
  /** JSON-encoded arguments */
  arguments: string;
}

/** Response from calling an MCP tool */
export interface CallMCPToolResponse {
  /** Whether the call was successful */
  success: boolean;
  /** Response content */
  content: string;
  /** Error message if any */
  error: string;
  /** Whether the response indicates an error */
  isError: boolean;
}

/** Request to access an MCP resource */
export interface AccessMCPResourceRequest {
  /** Name of the server */
  serverName: string;
  /** URI of the resource */
  uri: string;
}

/** Response from accessing an MCP resource */
export interface AccessMCPResourceResponse {
  /** Whether the access was successful */
  success: boolean;
  /** Resource content */
  content: string;
  /** MIME type of the resource */
  mimeType: string;
  /** Error message if any */
  error: string;
}

/** Request to register a new MCP server */
export interface RegisterMCPServerRequest {
  /** Name for the server */
  name: string;
  /** Command to start the server */
  command: string;
  /** Arguments for the command */
  args: string[];
  /** Environment variables */
  env: { [key: string]: string };
  /** Whether to start the server automatically */
  autoStart: boolean;
}

export interface RegisterMCPServerRequest_EnvEntry {
  key: string;
  value: string;
}

/** Response from registering an MCP server */
export interface RegisterMCPServerResponse {
  /** Whether the registration was successful */
  success: boolean;
  /** Error message if any */
  error: string;
}

/** Request to start an MCP server */
export interface StartMCPServerRequest {
  /** Name of the server */
  name: string;
}

/** Response from starting an MCP server */
export interface StartMCPServerResponse {
  /** Whether the server was started successfully */
  success: boolean;
  /** Error message if any */
  error: string;
}

/** Request to stop an MCP server */
export interface StopMCPServerRequest {
  /** Name of the server */
  name: string;
}

/** Response from stopping an MCP server */
export interface StopMCPServerResponse {
  /** Whether the server was stopped successfully */
  success: boolean;
  /** Error message if any */
  error: string;
}

function createBaseListMCPServersRequest(): ListMCPServersRequest {
  return {};
}

export const ListMCPServersRequest: MessageFns<ListMCPServersRequest> = {
  encode(_: ListMCPServersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListMCPServersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListMCPServersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListMCPServersRequest {
    return {};
  },

  toJSON(_: ListMCPServersRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ListMCPServersRequest>, I>>(base?: I): ListMCPServersRequest {
    return ListMCPServersRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListMCPServersRequest>, I>>(_: I): ListMCPServersRequest {
    const message = createBaseListMCPServersRequest();
    return message;
  },
};

function createBaseListMCPServersResponse(): ListMCPServersResponse {
  return { servers: [], error: "" };
}

export const ListMCPServersResponse: MessageFns<ListMCPServersResponse> = {
  encode(message: ListMCPServersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.servers) {
      MCPServer.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.error !== "") {
      writer.uint32(18).string(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListMCPServersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListMCPServersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.servers.push(MCPServer.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListMCPServersResponse {
    return {
      servers: globalThis.Array.isArray(object?.servers) ? object.servers.map((e: any) => MCPServer.fromJSON(e)) : [],
      error: isSet(object.error) ? globalThis.String(object.error) : "",
    };
  },

  toJSON(message: ListMCPServersResponse): unknown {
    const obj: any = {};
    if (message.servers?.length) {
      obj.servers = message.servers.map((e) => MCPServer.toJSON(e));
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListMCPServersResponse>, I>>(base?: I): ListMCPServersResponse {
    return ListMCPServersResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListMCPServersResponse>, I>>(object: I): ListMCPServersResponse {
    const message = createBaseListMCPServersResponse();
    message.servers = object.servers?.map((e) => MCPServer.fromPartial(e)) || [];
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseMCPServer(): MCPServer {
  return { name: "", version: "", isRunning: false, tools: [], resources: [] };
}

export const MCPServer: MessageFns<MCPServer> = {
  encode(message: MCPServer, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.version !== "") {
      writer.uint32(18).string(message.version);
    }
    if (message.isRunning !== false) {
      writer.uint32(24).bool(message.isRunning);
    }
    for (const v of message.tools) {
      MCPTool.encode(v!, writer.uint32(34).fork()).join();
    }
    for (const v of message.resources) {
      MCPResource.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MCPServer {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMCPServer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.version = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.isRunning = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.tools.push(MCPTool.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.resources.push(MCPResource.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MCPServer {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      isRunning: isSet(object.isRunning) ? globalThis.Boolean(object.isRunning) : false,
      tools: globalThis.Array.isArray(object?.tools) ? object.tools.map((e: any) => MCPTool.fromJSON(e)) : [],
      resources: globalThis.Array.isArray(object?.resources)
        ? object.resources.map((e: any) => MCPResource.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MCPServer): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.isRunning !== false) {
      obj.isRunning = message.isRunning;
    }
    if (message.tools?.length) {
      obj.tools = message.tools.map((e) => MCPTool.toJSON(e));
    }
    if (message.resources?.length) {
      obj.resources = message.resources.map((e) => MCPResource.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MCPServer>, I>>(base?: I): MCPServer {
    return MCPServer.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MCPServer>, I>>(object: I): MCPServer {
    const message = createBaseMCPServer();
    message.name = object.name ?? "";
    message.version = object.version ?? "";
    message.isRunning = object.isRunning ?? false;
    message.tools = object.tools?.map((e) => MCPTool.fromPartial(e)) || [];
    message.resources = object.resources?.map((e) => MCPResource.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMCPTool(): MCPTool {
  return { name: "", description: "", inputSchema: "", outputSchema: "" };
}

export const MCPTool: MessageFns<MCPTool> = {
  encode(message: MCPTool, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.inputSchema !== "") {
      writer.uint32(26).string(message.inputSchema);
    }
    if (message.outputSchema !== "") {
      writer.uint32(34).string(message.outputSchema);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MCPTool {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMCPTool();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.inputSchema = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.outputSchema = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MCPTool {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      inputSchema: isSet(object.inputSchema) ? globalThis.String(object.inputSchema) : "",
      outputSchema: isSet(object.outputSchema) ? globalThis.String(object.outputSchema) : "",
    };
  },

  toJSON(message: MCPTool): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.inputSchema !== "") {
      obj.inputSchema = message.inputSchema;
    }
    if (message.outputSchema !== "") {
      obj.outputSchema = message.outputSchema;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MCPTool>, I>>(base?: I): MCPTool {
    return MCPTool.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MCPTool>, I>>(object: I): MCPTool {
    const message = createBaseMCPTool();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.inputSchema = object.inputSchema ?? "";
    message.outputSchema = object.outputSchema ?? "";
    return message;
  },
};

function createBaseMCPResource(): MCPResource {
  return { uri: "", name: "", mimeType: "", description: "" };
}

export const MCPResource: MessageFns<MCPResource> = {
  encode(message: MCPResource, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uri !== "") {
      writer.uint32(10).string(message.uri);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.mimeType !== "") {
      writer.uint32(26).string(message.mimeType);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MCPResource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMCPResource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.uri = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.mimeType = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MCPResource {
    return {
      uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      mimeType: isSet(object.mimeType) ? globalThis.String(object.mimeType) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: MCPResource): unknown {
    const obj: any = {};
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.mimeType !== "") {
      obj.mimeType = message.mimeType;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MCPResource>, I>>(base?: I): MCPResource {
    return MCPResource.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MCPResource>, I>>(object: I): MCPResource {
    const message = createBaseMCPResource();
    message.uri = object.uri ?? "";
    message.name = object.name ?? "";
    message.mimeType = object.mimeType ?? "";
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseCallMCPToolRequest(): CallMCPToolRequest {
  return { serverName: "", toolName: "", arguments: "" };
}

export const CallMCPToolRequest: MessageFns<CallMCPToolRequest> = {
  encode(message: CallMCPToolRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serverName !== "") {
      writer.uint32(10).string(message.serverName);
    }
    if (message.toolName !== "") {
      writer.uint32(18).string(message.toolName);
    }
    if (message.arguments !== "") {
      writer.uint32(26).string(message.arguments);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CallMCPToolRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCallMCPToolRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.serverName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.toolName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.arguments = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CallMCPToolRequest {
    return {
      serverName: isSet(object.serverName) ? globalThis.String(object.serverName) : "",
      toolName: isSet(object.toolName) ? globalThis.String(object.toolName) : "",
      arguments: isSet(object.arguments) ? globalThis.String(object.arguments) : "",
    };
  },

  toJSON(message: CallMCPToolRequest): unknown {
    const obj: any = {};
    if (message.serverName !== "") {
      obj.serverName = message.serverName;
    }
    if (message.toolName !== "") {
      obj.toolName = message.toolName;
    }
    if (message.arguments !== "") {
      obj.arguments = message.arguments;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CallMCPToolRequest>, I>>(base?: I): CallMCPToolRequest {
    return CallMCPToolRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CallMCPToolRequest>, I>>(object: I): CallMCPToolRequest {
    const message = createBaseCallMCPToolRequest();
    message.serverName = object.serverName ?? "";
    message.toolName = object.toolName ?? "";
    message.arguments = object.arguments ?? "";
    return message;
  },
};

function createBaseCallMCPToolResponse(): CallMCPToolResponse {
  return { success: false, content: "", error: "", isError: false };
}

export const CallMCPToolResponse: MessageFns<CallMCPToolResponse> = {
  encode(message: CallMCPToolResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.content !== "") {
      writer.uint32(18).string(message.content);
    }
    if (message.error !== "") {
      writer.uint32(26).string(message.error);
    }
    if (message.isError !== false) {
      writer.uint32(32).bool(message.isError);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CallMCPToolResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCallMCPToolResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.content = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.error = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.isError = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CallMCPToolResponse {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      content: isSet(object.content) ? globalThis.String(object.content) : "",
      error: isSet(object.error) ? globalThis.String(object.error) : "",
      isError: isSet(object.isError) ? globalThis.Boolean(object.isError) : false,
    };
  },

  toJSON(message: CallMCPToolResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.content !== "") {
      obj.content = message.content;
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    if (message.isError !== false) {
      obj.isError = message.isError;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CallMCPToolResponse>, I>>(base?: I): CallMCPToolResponse {
    return CallMCPToolResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CallMCPToolResponse>, I>>(object: I): CallMCPToolResponse {
    const message = createBaseCallMCPToolResponse();
    message.success = object.success ?? false;
    message.content = object.content ?? "";
    message.error = object.error ?? "";
    message.isError = object.isError ?? false;
    return message;
  },
};

function createBaseAccessMCPResourceRequest(): AccessMCPResourceRequest {
  return { serverName: "", uri: "" };
}

export const AccessMCPResourceRequest: MessageFns<AccessMCPResourceRequest> = {
  encode(message: AccessMCPResourceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serverName !== "") {
      writer.uint32(10).string(message.serverName);
    }
    if (message.uri !== "") {
      writer.uint32(18).string(message.uri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AccessMCPResourceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccessMCPResourceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.serverName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.uri = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AccessMCPResourceRequest {
    return {
      serverName: isSet(object.serverName) ? globalThis.String(object.serverName) : "",
      uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
    };
  },

  toJSON(message: AccessMCPResourceRequest): unknown {
    const obj: any = {};
    if (message.serverName !== "") {
      obj.serverName = message.serverName;
    }
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AccessMCPResourceRequest>, I>>(base?: I): AccessMCPResourceRequest {
    return AccessMCPResourceRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AccessMCPResourceRequest>, I>>(object: I): AccessMCPResourceRequest {
    const message = createBaseAccessMCPResourceRequest();
    message.serverName = object.serverName ?? "";
    message.uri = object.uri ?? "";
    return message;
  },
};

function createBaseAccessMCPResourceResponse(): AccessMCPResourceResponse {
  return { success: false, content: "", mimeType: "", error: "" };
}

export const AccessMCPResourceResponse: MessageFns<AccessMCPResourceResponse> = {
  encode(message: AccessMCPResourceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.content !== "") {
      writer.uint32(18).string(message.content);
    }
    if (message.mimeType !== "") {
      writer.uint32(26).string(message.mimeType);
    }
    if (message.error !== "") {
      writer.uint32(34).string(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AccessMCPResourceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccessMCPResourceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.content = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.mimeType = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.error = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AccessMCPResourceResponse {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      content: isSet(object.content) ? globalThis.String(object.content) : "",
      mimeType: isSet(object.mimeType) ? globalThis.String(object.mimeType) : "",
      error: isSet(object.error) ? globalThis.String(object.error) : "",
    };
  },

  toJSON(message: AccessMCPResourceResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.content !== "") {
      obj.content = message.content;
    }
    if (message.mimeType !== "") {
      obj.mimeType = message.mimeType;
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AccessMCPResourceResponse>, I>>(base?: I): AccessMCPResourceResponse {
    return AccessMCPResourceResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AccessMCPResourceResponse>, I>>(object: I): AccessMCPResourceResponse {
    const message = createBaseAccessMCPResourceResponse();
    message.success = object.success ?? false;
    message.content = object.content ?? "";
    message.mimeType = object.mimeType ?? "";
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseRegisterMCPServerRequest(): RegisterMCPServerRequest {
  return { name: "", command: "", args: [], env: {}, autoStart: false };
}

export const RegisterMCPServerRequest: MessageFns<RegisterMCPServerRequest> = {
  encode(message: RegisterMCPServerRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.command !== "") {
      writer.uint32(18).string(message.command);
    }
    for (const v of message.args) {
      writer.uint32(26).string(v!);
    }
    Object.entries(message.env).forEach(([key, value]) => {
      RegisterMCPServerRequest_EnvEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    if (message.autoStart !== false) {
      writer.uint32(40).bool(message.autoStart);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RegisterMCPServerRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegisterMCPServerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.command = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.args.push(reader.string());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          const entry4 = RegisterMCPServerRequest_EnvEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.env[entry4.key] = entry4.value;
          }
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.autoStart = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RegisterMCPServerRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      command: isSet(object.command) ? globalThis.String(object.command) : "",
      args: globalThis.Array.isArray(object?.args) ? object.args.map((e: any) => globalThis.String(e)) : [],
      env: isObject(object.env)
        ? Object.entries(object.env).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      autoStart: isSet(object.autoStart) ? globalThis.Boolean(object.autoStart) : false,
    };
  },

  toJSON(message: RegisterMCPServerRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.command !== "") {
      obj.command = message.command;
    }
    if (message.args?.length) {
      obj.args = message.args;
    }
    if (message.env) {
      const entries = Object.entries(message.env);
      if (entries.length > 0) {
        obj.env = {};
        entries.forEach(([k, v]) => {
          obj.env[k] = v;
        });
      }
    }
    if (message.autoStart !== false) {
      obj.autoStart = message.autoStart;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RegisterMCPServerRequest>, I>>(base?: I): RegisterMCPServerRequest {
    return RegisterMCPServerRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RegisterMCPServerRequest>, I>>(object: I): RegisterMCPServerRequest {
    const message = createBaseRegisterMCPServerRequest();
    message.name = object.name ?? "";
    message.command = object.command ?? "";
    message.args = object.args?.map((e) => e) || [];
    message.env = Object.entries(object.env ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.autoStart = object.autoStart ?? false;
    return message;
  },
};

function createBaseRegisterMCPServerRequest_EnvEntry(): RegisterMCPServerRequest_EnvEntry {
  return { key: "", value: "" };
}

export const RegisterMCPServerRequest_EnvEntry: MessageFns<RegisterMCPServerRequest_EnvEntry> = {
  encode(message: RegisterMCPServerRequest_EnvEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RegisterMCPServerRequest_EnvEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegisterMCPServerRequest_EnvEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RegisterMCPServerRequest_EnvEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: RegisterMCPServerRequest_EnvEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RegisterMCPServerRequest_EnvEntry>, I>>(
    base?: I,
  ): RegisterMCPServerRequest_EnvEntry {
    return RegisterMCPServerRequest_EnvEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RegisterMCPServerRequest_EnvEntry>, I>>(
    object: I,
  ): RegisterMCPServerRequest_EnvEntry {
    const message = createBaseRegisterMCPServerRequest_EnvEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseRegisterMCPServerResponse(): RegisterMCPServerResponse {
  return { success: false, error: "" };
}

export const RegisterMCPServerResponse: MessageFns<RegisterMCPServerResponse> = {
  encode(message: RegisterMCPServerResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.error !== "") {
      writer.uint32(18).string(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RegisterMCPServerResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegisterMCPServerResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RegisterMCPServerResponse {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      error: isSet(object.error) ? globalThis.String(object.error) : "",
    };
  },

  toJSON(message: RegisterMCPServerResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RegisterMCPServerResponse>, I>>(base?: I): RegisterMCPServerResponse {
    return RegisterMCPServerResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RegisterMCPServerResponse>, I>>(object: I): RegisterMCPServerResponse {
    const message = createBaseRegisterMCPServerResponse();
    message.success = object.success ?? false;
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseStartMCPServerRequest(): StartMCPServerRequest {
  return { name: "" };
}

export const StartMCPServerRequest: MessageFns<StartMCPServerRequest> = {
  encode(message: StartMCPServerRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StartMCPServerRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStartMCPServerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StartMCPServerRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: StartMCPServerRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StartMCPServerRequest>, I>>(base?: I): StartMCPServerRequest {
    return StartMCPServerRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StartMCPServerRequest>, I>>(object: I): StartMCPServerRequest {
    const message = createBaseStartMCPServerRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseStartMCPServerResponse(): StartMCPServerResponse {
  return { success: false, error: "" };
}

export const StartMCPServerResponse: MessageFns<StartMCPServerResponse> = {
  encode(message: StartMCPServerResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.error !== "") {
      writer.uint32(18).string(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StartMCPServerResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStartMCPServerResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StartMCPServerResponse {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      error: isSet(object.error) ? globalThis.String(object.error) : "",
    };
  },

  toJSON(message: StartMCPServerResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StartMCPServerResponse>, I>>(base?: I): StartMCPServerResponse {
    return StartMCPServerResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StartMCPServerResponse>, I>>(object: I): StartMCPServerResponse {
    const message = createBaseStartMCPServerResponse();
    message.success = object.success ?? false;
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseStopMCPServerRequest(): StopMCPServerRequest {
  return { name: "" };
}

export const StopMCPServerRequest: MessageFns<StopMCPServerRequest> = {
  encode(message: StopMCPServerRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StopMCPServerRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStopMCPServerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StopMCPServerRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: StopMCPServerRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StopMCPServerRequest>, I>>(base?: I): StopMCPServerRequest {
    return StopMCPServerRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StopMCPServerRequest>, I>>(object: I): StopMCPServerRequest {
    const message = createBaseStopMCPServerRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseStopMCPServerResponse(): StopMCPServerResponse {
  return { success: false, error: "" };
}

export const StopMCPServerResponse: MessageFns<StopMCPServerResponse> = {
  encode(message: StopMCPServerResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.error !== "") {
      writer.uint32(18).string(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StopMCPServerResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStopMCPServerResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StopMCPServerResponse {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      error: isSet(object.error) ? globalThis.String(object.error) : "",
    };
  },

  toJSON(message: StopMCPServerResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StopMCPServerResponse>, I>>(base?: I): StopMCPServerResponse {
    return StopMCPServerResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StopMCPServerResponse>, I>>(object: I): StopMCPServerResponse {
    const message = createBaseStopMCPServerResponse();
    message.success = object.success ?? false;
    message.error = object.error ?? "";
    return message;
  },
};

/** MCP service for Model Context Protocol integration */
export type MCPServiceService = typeof MCPServiceService;
export const MCPServiceService = {
  /** List available MCP servers */
  listMcpServers: {
    path: "/cline.MCPService/ListMCPServers",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListMCPServersRequest) => Buffer.from(ListMCPServersRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListMCPServersRequest.decode(value),
    responseSerialize: (value: ListMCPServersResponse) => Buffer.from(ListMCPServersResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListMCPServersResponse.decode(value),
  },
  /** Call a tool provided by an MCP server */
  callMcpTool: {
    path: "/cline.MCPService/CallMCPTool",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CallMCPToolRequest) => Buffer.from(CallMCPToolRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CallMCPToolRequest.decode(value),
    responseSerialize: (value: CallMCPToolResponse) => Buffer.from(CallMCPToolResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CallMCPToolResponse.decode(value),
  },
  /** Access a resource provided by an MCP server */
  accessMcpResource: {
    path: "/cline.MCPService/AccessMCPResource",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AccessMCPResourceRequest) => Buffer.from(AccessMCPResourceRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => AccessMCPResourceRequest.decode(value),
    responseSerialize: (value: AccessMCPResourceResponse) =>
      Buffer.from(AccessMCPResourceResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => AccessMCPResourceResponse.decode(value),
  },
  /** Register a new MCP server */
  registerMcpServer: {
    path: "/cline.MCPService/RegisterMCPServer",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: RegisterMCPServerRequest) => Buffer.from(RegisterMCPServerRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => RegisterMCPServerRequest.decode(value),
    responseSerialize: (value: RegisterMCPServerResponse) =>
      Buffer.from(RegisterMCPServerResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => RegisterMCPServerResponse.decode(value),
  },
  /** Start an MCP server */
  startMcpServer: {
    path: "/cline.MCPService/StartMCPServer",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: StartMCPServerRequest) => Buffer.from(StartMCPServerRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => StartMCPServerRequest.decode(value),
    responseSerialize: (value: StartMCPServerResponse) => Buffer.from(StartMCPServerResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => StartMCPServerResponse.decode(value),
  },
  /** Stop an MCP server */
  stopMcpServer: {
    path: "/cline.MCPService/StopMCPServer",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: StopMCPServerRequest) => Buffer.from(StopMCPServerRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => StopMCPServerRequest.decode(value),
    responseSerialize: (value: StopMCPServerResponse) => Buffer.from(StopMCPServerResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => StopMCPServerResponse.decode(value),
  },
} as const;

export interface MCPServiceServer extends UntypedServiceImplementation {
  /** List available MCP servers */
  listMcpServers: handleUnaryCall<ListMCPServersRequest, ListMCPServersResponse>;
  /** Call a tool provided by an MCP server */
  callMcpTool: handleUnaryCall<CallMCPToolRequest, CallMCPToolResponse>;
  /** Access a resource provided by an MCP server */
  accessMcpResource: handleUnaryCall<AccessMCPResourceRequest, AccessMCPResourceResponse>;
  /** Register a new MCP server */
  registerMcpServer: handleUnaryCall<RegisterMCPServerRequest, RegisterMCPServerResponse>;
  /** Start an MCP server */
  startMcpServer: handleUnaryCall<StartMCPServerRequest, StartMCPServerResponse>;
  /** Stop an MCP server */
  stopMcpServer: handleUnaryCall<StopMCPServerRequest, StopMCPServerResponse>;
}

export interface MCPServiceClient extends Client {
  /** List available MCP servers */
  listMcpServers(
    request: ListMCPServersRequest,
    callback: (error: ServiceError | null, response: ListMCPServersResponse) => void,
  ): ClientUnaryCall;
  listMcpServers(
    request: ListMCPServersRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListMCPServersResponse) => void,
  ): ClientUnaryCall;
  listMcpServers(
    request: ListMCPServersRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListMCPServersResponse) => void,
  ): ClientUnaryCall;
  /** Call a tool provided by an MCP server */
  callMcpTool(
    request: CallMCPToolRequest,
    callback: (error: ServiceError | null, response: CallMCPToolResponse) => void,
  ): ClientUnaryCall;
  callMcpTool(
    request: CallMCPToolRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CallMCPToolResponse) => void,
  ): ClientUnaryCall;
  callMcpTool(
    request: CallMCPToolRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CallMCPToolResponse) => void,
  ): ClientUnaryCall;
  /** Access a resource provided by an MCP server */
  accessMcpResource(
    request: AccessMCPResourceRequest,
    callback: (error: ServiceError | null, response: AccessMCPResourceResponse) => void,
  ): ClientUnaryCall;
  accessMcpResource(
    request: AccessMCPResourceRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: AccessMCPResourceResponse) => void,
  ): ClientUnaryCall;
  accessMcpResource(
    request: AccessMCPResourceRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: AccessMCPResourceResponse) => void,
  ): ClientUnaryCall;
  /** Register a new MCP server */
  registerMcpServer(
    request: RegisterMCPServerRequest,
    callback: (error: ServiceError | null, response: RegisterMCPServerResponse) => void,
  ): ClientUnaryCall;
  registerMcpServer(
    request: RegisterMCPServerRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: RegisterMCPServerResponse) => void,
  ): ClientUnaryCall;
  registerMcpServer(
    request: RegisterMCPServerRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: RegisterMCPServerResponse) => void,
  ): ClientUnaryCall;
  /** Start an MCP server */
  startMcpServer(
    request: StartMCPServerRequest,
    callback: (error: ServiceError | null, response: StartMCPServerResponse) => void,
  ): ClientUnaryCall;
  startMcpServer(
    request: StartMCPServerRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: StartMCPServerResponse) => void,
  ): ClientUnaryCall;
  startMcpServer(
    request: StartMCPServerRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: StartMCPServerResponse) => void,
  ): ClientUnaryCall;
  /** Stop an MCP server */
  stopMcpServer(
    request: StopMCPServerRequest,
    callback: (error: ServiceError | null, response: StopMCPServerResponse) => void,
  ): ClientUnaryCall;
  stopMcpServer(
    request: StopMCPServerRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: StopMCPServerResponse) => void,
  ): ClientUnaryCall;
  stopMcpServer(
    request: StopMCPServerRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: StopMCPServerResponse) => void,
  ): ClientUnaryCall;
}

export const MCPServiceClient = makeGenericClientConstructor(MCPServiceService, "cline.MCPService") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): MCPServiceClient;
  service: typeof MCPServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
