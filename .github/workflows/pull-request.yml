name: Create Linear Issue on Pull Request

on:
    workflow_dispatch:
    pull_request:
        branches: [main]
        types: [opened, synchronize]

permissions:
    contents: read
    pull-requests: write

jobs:
    create-linear-issue-on-pull-request:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v3

            - name: Check for existing Linear link
              id: check-linear
              uses: ./.github/actions/check-linear

            - name: Find or create Linear issue via GraphQL
              if: steps.check-linear.outputs.result == 'false'
              id: linear
              uses: ./.github/actions/find-or-create-linear-issue
              with:
                  team-id: "19b9c1b2-5f58-498c-b1bf-23ee8f52a677"
                  api-key: ${{ secrets.LINEAR_API_KEY }}
                  state-id: "4d9bcba2-6712-47e3-b577-6ec1ee023dc2"
                  label-ids: '["504e7d60-5037-483f-a9b8-7e298bdf116f"]'

            - name: Comment PR with Linear link
              if: steps.check-linear.outputs.result == 'false'
              uses: actions/github-script@v6
              with:
                  script: |
                      const pr = context.payload.pull_request;
                      const url = `${{ steps.linear.outputs.linear-issue-url }}`;
                      const body = `ðŸ”— Linear issue created: ${url}`;
                      // Fetch existing comments
                      const { data: comments } = await github.rest.issues.listComments({
                        ...context.repo,
                        issue_number: pr.number
                      });
                      const botComment = comments.find(c =>
                        c.user.type === "Bot" && c.body.startsWith("ðŸ”— Linear issue created:")
                      );
                      if (botComment) {
                        await github.rest.issues.updateComment({
                          ...context.repo,
                          comment_id: botComment.id,
                          body
                        });
                      } else {
                        await github.rest.issues.createComment({
                          ...context.repo,
                          issue_number: pr.number,
                          body
                        });
                      }
